#pragma once

#include <opencv2/opencv.hpp>

namespace seevider {
	class MotionDetection
	{
	public:
		/**
		 * The basic constructor.
		 * @params imageSize the original image width and height
		 */
		MotionDetection(cv::Size imageSize);
		~MotionDetection();

		/**
		 * Update motion status. To check if any motion has detected, use isMotionDetected method.
		 */
		void update(const cv::Mat &frame);

		/**
		 * Check if motion is detected in given area. If given area is empty, it will check any motion in the enitre area.
		 */
		bool isMotionDetected(const cv::Mat &frame, cv::Rect ROI = cv::Rect()) const;

	private:
		/**
		 * Class object for MOG2
		 */
		//cv::BackgroundSubtractorMOG2 mMOG2;
		cv::Ptr<cv::BackgroundSubtractor> mMOG2;

		/**
		 * Foreground mask generated by MOG2 method
		 */
		cv::Mat mFGMaskMOG2;

		/**
		 * Apply resize for each input frame if set to true
		 */
		bool mResize = false;

		/**
		 * To save the processing time, resize the input image to this size.
		 * The minimum resizable dimension is 640x480.
		 */
		cv::Size mTargetSize;

		/**
		 *
		 */
		int mMinMotionArea = 1;

		/**
		 *
		 */
		int mMaxMotionArea = 30;

		/**
		 * Size of the frames will be considered
		 */
		int mHistorySize = 100;
	};
}
